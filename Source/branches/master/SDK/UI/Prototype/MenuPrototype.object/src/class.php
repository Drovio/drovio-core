<?php
//#section#[header]
// Namespace
namespace UI\Prototype;

// Use Important Headers
use \API\Platform\importer;
use \Exception;

// Check Platform Existance
if (!defined('_RB_PLATFORM_'))
	throw new Exception("Platform is not defined!");
//#section_end#
//#section#[class]
/**
 * @library	UI
 * @package	Prototype
 * 
 * @copyright	Copyright (C) 2015 DrovIO. All rights reserved.
 */

importer::import("ESS", "Protocol", "client/NavigatorProtocol");
importer::import("UI", "Html", "DOM");
importer::import("UI", "Prototype", "UIObjectPrototype");

use \ESS\Protocol\client\NavigatorProtocol;
use \UI\Html\DOM;
use \UI\Prototype\UIObjectPrototype;

/**
 * Menu Prototype
 * 
 * This is the menu prototype (implements the composite pattern).
 * All menus (and extensions of it) must inherit this prototype and build a proper menu object.
 * 
 * @version	0.1-2
 * @created	July 28, 2015, 12:43 (EEST)
 * @updated	July 28, 2015, 16:14 (EEST)
 */
class MenuPrototype extends UIObjectPrototype
{
	/**
	 * The menulist of this menu.
	 * 
	 * @type	DOMElement
	 */
	protected $menuList;
	
	/**
	 * Builds the spine of the menu and sets the UIObject.
	 * 
	 * @param	string	$id
	 * 		The menu id.
	 * 
	 * @param	string	$class
	 * 		The menu class.
	 * 
	 * @return	void
	 */
	public function build($id = "", $class = "")
	{
		// Build Menu Container
		$menuContainer = DOM::create("div", "", $id, $class);
		$this->set($menuContainer);
		
		// Build Menu List
		$this->menuList = DOM::create("ul");
		DOM::append($menuContainer, $this->menuList);
		
		return $this;
	}
	
	/**
	 * Creates a menuItem.
	 * 
	 * @param	string	$id
	 * 		The id of the menuItem.
	 * 
	 * @param	string	$class
	 * 		The class of the menuItem.
	 * 
	 * @param	mixed	$context
	 * 		The context of the menuItem.
	 * 
	 * @return	DOMElement
	 * 		The menu item created.
	 */
	public function getMenuItem($id = "", $class = "", $context = "")
	{
		$class = "mpItem".(empty($class) ? "" : " ".$class);
		$item = DOM::create("li", "", $id, $class);
		if (!empty($context))
			DOM::append($item, $context);
		
		return $item;
	}
	
	/**
	 * Creates a menuItem and appends it to the menuList.
	 * 
	 * @param	string	$id
	 * 		The id of the menuItem.
	 * 
	 * @param	string	$class
	 * 		The class of the menuItem.
	 * 
	 * @param	mixed	$context
	 * 		The context of the menuItem.
	 * 
	 * @return	DOMElement
	 * 		The menu item created.
	 */
	public function createMenuItem($id = "", $class = "", $context = NULL)
	{
		// Creat emenu item
		$item = $this->getMenuItem($id, $class, $context);
		
		// Append the item to the parent
		DOM::append($this->menuList, $item);
		
		return $item;
	}
	
	/**
	 * Insert a ready menu item generated by getMenuItem() or a product.
	 * 
	 * @param	DOMElement	$item
	 * 		The menu item to be inserted.
	 * 
	 * @return	MenuPrototype
	 * 		The MenuPrototype object.
	 */
	public function insertMenuItem($item)
	{
		if (!is_null($item))
			DOM::append($this->menuList, $item);
		
		return $this;
	}
	
	/**
	 * Adds static navigation handler.
	 * 
	 * @param	DOMElement	$element
	 * 		The element to receive the navigation handler.
	 * 
	 * @param	string	$ref
	 * 		The target's id to perform the action.
	 * 
	 * @param	string	$targetcontainer
	 * 		The container's class of the group in which the target resides.
	 * 
	 * @param	string	$targetgroup
	 * 		The group of the items to handle together when performing the action to the target. For more information, see the NavigatorProtocol.
	 * 
	 * @param	string	$navgroup
	 * 		The group of navigation items, among which the handler element will be selected
	 * 
	 * @param	string	$display
	 * 		Defines the type of action for the rest items of the group. For more information, see the NavigatorProtocol.
	 * 
	 * @return	void
	 */
	public static function setStaticNav($element, $ref, $targetcontainer, $targetgroup, $navgroup, $display = "none")
	{
		NavigatorProtocol::staticNav($element, $ref, $targetcontainer, $targetgroup, $navgroup, $display);
	}
	
	/**
	 * Adds a navigation group selector to the given element.
	 * 
	 * @param	DOMElement	$element
	 * 		The group selector element.
	 * 
	 * @param	string	$selector
	 * 		The selector.
	 * 
	 * @return	{type}
	 * 		{description}
	 */
	public static function setNavigationGroup($element, $selector)
	{
		NavigatorProtocol::selector($element, $selector);
	}
	
	/**
	 * Creates a static navigation group.
	 * For more information, see the NavigatorProtocol.
	 * 
	 * @param	string	$id
	 * 		The id of the navigation group.
	 * 
	 * @param	string	$groupSelector
	 * 		The static navigation selector for the group.
	 * 
	 * @return	DOMElement
	 * 		The navigation group element.
	 */
	public static function getNavigationGroup($id, $groupSelector)
	{
		// Create Navigation Group
		$navGroup = DOM::create("div", "", $id);
		NavigatorProtocol::selector($navGroup, $groupSelector);
		
		return $navGroup;
	}
	
	/**
	 * {description}
	 * 
	 * @param	{type}	$element
	 * 		{description}
	 * 
	 * @param	{type}	$ref
	 * 		{description}
	 * 
	 * @param	{type}	$targetcontainer
	 * 		{description}
	 * 
	 * @param	{type}	$targetgroup
	 * 		{description}
	 * 
	 * @param	{type}	$navgroup
	 * 		{description}
	 * 
	 * @param	{type}	$display
	 * 		{description}
	 * 
	 * @return	void
	 * 
	 * @deprecated	Use setStaticNav() instead.
	 */
	public static function addNavigation($element, $ref, $targetcontainer, $targetgroup, $navgroup, $display = "none")
	{
		NavigatorProtocol::staticNav($element, $ref, $targetcontainer, $targetgroup, $navgroup, $display);
	}
	
	/**
	 * {description}
	 * 
	 * @param	{type}	$element
	 * 		{description}
	 * 
	 * @param	{type}	$selector
	 * 		{description}
	 * 
	 * @return	void
	 * 
	 * @deprecated	Use setNavigationGroup() instead.
	 */
	public static function addNavigationSelector($element, $selector)
	{
		NavigatorProtocol::selector($element, $selector);
	}
	
	/**
	 * {description}
	 * 
	 * @return	void
	 * 
	 * @deprecated	Use class functions instead.
	 */
	public function getNavProtocol()
	{
		return new NavigatorProtocol();
	}
}
//#section_end#
?>