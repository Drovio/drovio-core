<?xml version="1.0" encoding="UTF-8"?>
<manual library="API" package="Literals" namespace="\">
  <class name="moduleLiteral" abstract="">
    <info>
      <version>1.0</version>
      <build>1</build>
      <datecreated>1395645427</datecreated>
      <daterevised>1408798570</daterevised>
      <extends>
        <object>\DEV\Literals\literal</object>
      </extends>
      <implements/>
      <throws/>
      <title>Module Literal Handler</title>
      <description>Handles all module's literals</description>
      <deprecated/>
    </info>
    <constants/>
    <properties>
      <scope type="public"/>
      <scope type="protected"/>
      <scope type="private"/>
    </properties>
    <methods>
      <scope type="public">
        <method name="get" returntype="mixed" static="true">
          <description>Get a module's literal</description>
          <parameters>
            <parameter name="$moduleID" type="integer" defaultvalue="">
              <description>The module's id</description>
            </parameter>
            <parameter name="$name" type="string" defaultvalue="">
              <description>The literal's name</description>
            </parameter>
            <parameter name="$attributes" type="array" defaultvalue="">
              <description>An array of attributes to pass to the literal.</description>
            </parameter>
            <parameter name="$wrapped" type="boolean" defaultvalue="">
              <description>Whether the literal will be wrapped inside a span.</description>
            </parameter>
            <parameter name="$locale" type="string" defaultvalue="">
              <description>The locale to get the literals from. If NULL, get the current system locale.</description>
            </parameter>
          </parameters>
          <returndescription>The literal's value as a string or DOMElement, depending on $wrapped parameter.
Also returns an array of all literals in the default locale, if only the module's id is specified.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="add" returntype="boolean" static="true">
          <description>Create a new module's literal</description>
          <parameters>
            <parameter name="$moduleID" type="integer" defaultvalue="">
              <description>The module's id</description>
            </parameter>
            <parameter name="$name" type="string" defaultvalue="">
              <description>The literal's name</description>
            </parameter>
            <parameter name="$value" type="string" defaultvalue="">
              <description>The literal's value</description>
            </parameter>
            <parameter name="$description" type="string" defaultvalue="">
              <description>The literal's description</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="update" returntype="boolean" static="true">
          <description>Update a module's literal to the default locale</description>
          <parameters>
            <parameter name="$moduleID" type="integer" defaultvalue="">
              <description>The module's id</description>
            </parameter>
            <parameter name="$name" type="string" defaultvalue="">
              <description>The literal's name</description>
            </parameter>
            <parameter name="$value" type="string" defaultvalue="">
              <description>The literal's new value</description>
            </parameter>
            <parameter name="$description" type="string" defaultvalue="">
              <description>The literal's new description</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="remove" returntype="boolean" static="true">
          <description>Remove a module's literal from the system</description>
          <parameters>
            <parameter name="$moduleID" type="integer" defaultvalue="">
              <description>The module's id</description>
            </parameter>
            <parameter name="$name" type="string" defaultvalue="">
              <description>The literal's name</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="createScope" returntype="boolean" static="true">
          <description>Create a new module's literal scope.</description>
          <parameters>
            <parameter name="$moduleID" type="integer" defaultvalue="">
              <description>The module id to create literal scope for.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getScopes" returntype="array" static="true">
          <description>Get all scopes from the Redback Pages project.</description>
          <parameters/>
          <returndescription>An array of all scopes.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="removeScope" returntype="boolean" static="true">
          <description>Remove the module's literal scope.</description>
          <parameters>
            <parameter name="$moduleID" type="integer" defaultvalue="">
              <description>The module id to remove literal scope for.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="info" returntype="array" static="true">
          <description>Get information about a module literal.</description>
          <parameters>
            <parameter name="$moduleID" type="integer" defaultvalue="">
              <description>The module id to get literal information for.</description>
            </parameter>
            <parameter name="$name" type="string" defaultvalue="">
              <description>The literal name.</description>
            </parameter>
          </parameters>
          <returndescription>Literal information like scope, name and description.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
      <scope type="protected"/>
      <scope type="private"/>
    </methods>
  </class>
</manual>
