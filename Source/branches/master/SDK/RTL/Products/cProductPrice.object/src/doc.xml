<?xml version="1.0" encoding="UTF-8"?>
<manual library="RTL" package="Products" namespace="\">
  <class name="cProductPrice" abstract="">
    <info>
      <version>1.2</version>
      <build>3</build>
      <datecreated>1418655249</datecreated>
      <daterevised>1443045385</daterevised>
      <extends/>
      <implements/>
      <throws/>
      <title>Company Product Price Manager</title>
      <description>Sets, gets and removes product prices.
To be used only by product managers.
Changing product prices will have immediate effect everywhere.

All prices are saved without any taxes or VATs.</description>
      <deprecated/>
    </info>
    <constants/>
    <properties>
      <scope type="public"/>
      <scope type="protected"/>
      <scope type="private">
        <prop type="dbConnection" name="dbc">
          <description>The retail database connection manager.</description>
        </prop>
        <prop type="integer" name="productID">
          <description>The product id.</description>
        </prop>
        <prop type="boolean" name="valid">
          <description>Whether the product is valid with the current company.</description>
        </prop>
      </scope>
    </properties>
    <methods>
      <scope type="public">
        <method name="__construct" returntype="void">
          <description>Initialize the company product.</description>
          <parameters>
            <parameter name="$id" type="integer" defaultvalue="">
              <description>The company product id.</description>
            </parameter>
          </parameters>
          <returndescription/>
          <throws/>
          <deprecated/>
        </method>
        <method name="set" returntype="boolean">
          <description>Set a product price.
This will also update an existing price of the same type.</description>
          <parameters>
            <parameter name="$priceType" type="integer" defaultvalue="">
              <description>The price type as it fetched from the getPriceTypes() function.</description>
            </parameter>
            <parameter name="$price" type="float" defaultvalue="">
              <description>The product price.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="remove" returntype="boolean">
          <description>Remove a price from the current product.</description>
          <parameters>
            <parameter name="$priceType" type="integer" defaultvalue="">
              <description>The price type to remove.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getAllPrices" returntype="array">
          <description>Get all product prices.</description>
          <parameters>
            <parameter name="$compact" type="boolean" defaultvalue="">
              <description>If compact, it will return an array of price type (key) and price (value).
If not, it will return full price information including tax rate.
It is FALSE by default.</description>
            </parameter>
          </parameters>
          <returndescription>All product prices information.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getPriceTypes" returntype="array" static="true">
          <description>Get all company price types.</description>
          <parameters/>
          <returndescription>An array of all price types by id and title.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="setTaxRate" returntype="boolean">
          <description>Set the tax rate id for the current product.</description>
          <parameters>
            <parameter name="$taxRate" type="integer" defaultvalue="">
              <description>The tax rate id.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated>Use cProduct::setTacRate() instead.</deprecated>
        </method>
      </scope>
      <scope type="protected"/>
      <scope type="private">
        <method name="validate" returntype="boolean">
          <description>Validate whether the given product is of the current company.</description>
          <parameters/>
          <returndescription>True if valid, false otherwise.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
    </methods>
  </class>
</manual>
