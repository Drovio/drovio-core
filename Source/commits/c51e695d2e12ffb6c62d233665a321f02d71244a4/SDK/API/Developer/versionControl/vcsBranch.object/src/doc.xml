<?xml version="1.0" encoding="UTF-8"?>
<manual library="API" package="Developer" namespace="\versionControl">
  <class name="vcsBranch" abstract="" namespace="">
    <info>
      <version/>
      <datecreated>1363195380</datecreated>
      <daterevised>1384418634</daterevised>
      <extends/>
      <implements/>
      <throws/>
      <title>Version Control System Branch Manager</title>
      <description>Manages all functions in branches.</description>
      <deprecated>Use misc\vcs instead.</deprecated>
    </info>
    <constants>
      <const type="string" name="DIR">
        <description>The branch folder</description>
      </const>
      <const type="string" name="INDEX">
        <description>The branch index file</description>
      </const>
      <const type="string" name="RELEASE_BRANCH">
        <description>The reserved name for the release branch</description>
      </const>
    </constants>
    <properties>
      <scope type="public"/>
      <scope type="protected"/>
      <scope type="private">
        <prop type="string" name="reserved">
          <description>The reserved branch names that the user cannot create.</description>
        </prop>
        <prop type="string" name="directory">
          <description>The repository directory</description>
        </prop>
        <prop type="string" name="name">
          <description>The object's name</description>
        </prop>
        <prop type="string" name="type">
          <description>The object's filetype</description>
        </prop>
        <prop type="string" name="path">
          <description>The object's inner path.</description>
        </prop>
      </scope>
    </properties>
    <methods>
      <scope type="public">
        <method name="__construct" returntype="void">
          <description>Initializes the object's properties.</description>
          <parameters>
            <parameter name="$directory" type="string" defaultvalue="">
              <description>The repository directory.</description>
            </parameter>
            <parameter name="$name" type="string" defaultvalue="">
              <description>The object's name</description>
            </parameter>
            <parameter name="$type" type="string" defaultvalue="">
              <description>The object's filetype</description>
            </parameter>
            <parameter name="$path" type="string" defaultvalue="">
              <description>The object's inner path.</description>
            </parameter>
          </parameters>
          <deprecated/>
          <returndescription/>
          <throws/>
        </method>
        <method name="createStructure" returntype="void">
          <description>Creates the branch folder structure.</description>
          <parameters/>
          <deprecated/>
          <returndescription/>
          <throws/>
        </method>
        <method name="getBranchBase" returntype="NULL">
          <description>Gets or creates (if doesn't exist) the branch's index base.</description>
          <parameters>
            <parameter name="$parser" type="DOMParser" defaultvalue="">
              <description>The parser used to parse the index file.</description>
            </parameter>
            <parameter name="$forceCreate" type="boolean" defaultvalue="">
              <description>If TRUE and the base doesn't exist, it creates it. Otherwise, it returns the base (NULL if not exists).</description>
            </parameter>
          </parameters>
          <deprecated/>
          <returndescription/>
          <throws/>
        </method>
        <method name="getBase" returntype="NULL">
          <description>Gets or creates (if doesn't exist) the item's branch index base.</description>
          <parameters>
            <parameter name="$parser" type="DOMParser" defaultvalue="">
              <description>The parser used to parse the index file.</description>
            </parameter>
            <parameter name="$branch" type="string" defaultvalue="">
              <description>The item's branch.</description>
            </parameter>
            <parameter name="$forceCreate" type="boolean" defaultvalue="">
              <description>If TRUE and the base doesn't exist, it creates it. Otherwise, it returns the base (NULL if not exists).</description>
            </parameter>
          </parameters>
          <deprecated/>
          <returndescription/>
          <throws/>
        </method>
        <method name="create" returntype="boolean">
          <description>Create a new branch.</description>
          <parameters>
            <parameter name="$branch" type="string" defaultvalue="">
              <description>The branch's name.</description>
            </parameter>
          </parameters>
          <deprecated/>
          <returndescription/>
          <throws/>
        </method>
        <method name="delete" returntype="boolean">
          <description>Deletes an existing branch.</description>
          <parameters>
            <parameter name="$branch" type="string" defaultvalue="">
              <description>The branch's name.</description>
            </parameter>
          </parameters>
          <deprecated/>
          <returndescription/>
          <throws/>
        </method>
        <method name="deleteIndex" returntype="void">
          <description>Deletes the entire branch from the branch indexing.</description>
          <parameters/>
          <deprecated/>
          <returndescription/>
          <throws/>
        </method>
        <method name="commit" returntype="boolean">
          <description>Commits the object from the trunk to the given branch.</description>
          <parameters>
            <parameter name="$branch" type="string" defaultvalue="">
              <description>The branch to commit to.</description>
            </parameter>
            <parameter name="$description" type="string" defaultvalue="">
              <description>The commit description.</description>
            </parameter>
          </parameters>
          <deprecated/>
          <returndescription/>
          <throws/>
        </method>
        <method name="checkout" returntype="string">
          <description>Sets the HEAD index for the object and returns the object's path in order to be exported properly.</description>
          <parameters>
            <parameter name="$branch" type="string" defaultvalue="">
              <description>The branch which will be checked out.</description>
            </parameter>
          </parameters>
          <deprecated/>
          <returndescription/>
          <throws/>
        </method>
        <method name="getHeadPath" returntype="string">
          <description>Returns the head's path to the object.</description>
          <parameters/>
          <deprecated/>
          <returndescription/>
          <throws/>
        </method>
        <method name="release" returntype="boolean">
          <description>Creates a new release entry from the given branch.</description>
          <parameters>
            <parameter name="$branch" type="string" defaultvalue="">
              <description>The branch which will be the next release.</description>
            </parameter>
            <parameter name="$description" type="string" defaultvalue="">
              <description>A release description.</description>
            </parameter>
          </parameters>
          <deprecated/>
          <returndescription/>
          <throws/>
        </method>
        <method name="getBranchList" returntype="array">
          <description>Gets all the branches in an array.</description>
          <parameters/>
          <deprecated/>
          <returndescription/>
          <throws/>
        </method>
        <method name="getHead" returntype="string">
          <description>Returns the head branch's name</description>
          <parameters>
            <parameter name="$parser" type="DOMParser" defaultvalue="">
              <description>The parser used to parse the index file.</description>
            </parameter>
          </parameters>
          <deprecated/>
          <returndescription/>
          <throws/>
        </method>
        <method name="checkBranchReserved" returntype="boolean">
          <description>Checks if the given branch is a reserved branch</description>
          <parameters>
            <parameter name="$branch" type="string" defaultvalue="">
              <description>The branch to check.</description>
            </parameter>
          </parameters>
          <deprecated/>
          <returndescription/>
          <throws/>
        </method>
        <method name="checkBranchExists" returntype="boolean">
          <description>Checks if a given branch exists to the given repository.</description>
          <parameters>
            <parameter name="$branch" type="string" defaultvalue="">
              <description>The branch to check.</description>
            </parameter>
          </parameters>
          <deprecated/>
          <returndescription/>
          <throws/>
        </method>
      </scope>
      <scope type="protected"/>
      <scope type="private"/>
    </methods>
  </class>
</manual>
