<?xml version="1.0" encoding="UTF-8"?>
<manual library="AEL" package="Environment" namespace="\">
  <class name="cookies" abstract="">
    <info>
      <version>0.1</version>
      <build>1</build>
      <datecreated>1421848921</datecreated>
      <daterevised>1421848921</daterevised>
      <extends>
        <object>\ESS\Environment\cookies</object>
      </extends>
      <implements/>
      <throws/>
      <title>Application cookie manager.</title>
      <description>Manages cookies for applications.
Cookies are accessible to the entire platform, so there is a specific onomatology for the application cookies.

Pattern: __APP[id]_[name]
Where:
- id: application id
- name: cookie name</description>
      <deprecated/>
    </info>
    <constants/>
    <properties>
      <scope type="public"/>
      <scope type="protected"/>
      <scope type="private"/>
    </properties>
    <methods>
      <scope type="public">
        <method name="set" returntype="boolean" static="true">
          <description>Create a new cookie or update an existing one.</description>
          <parameters>
            <parameter name="$name" type="string" defaultvalue="">
              <description>The cookie's name.</description>
            </parameter>
            <parameter name="$value" type="string" defaultvalue="">
              <description>The cookie's value.</description>
            </parameter>
            <parameter name="$expiration" type="integer" defaultvalue="">
              <description>The expiration of the cookie in seconds.
If set to 0, the cookie will expire at the end of the session.
If set to &amp;lt;0 the cookie will be removed. You can use remove() instead.</description>
            </parameter>
            <parameter name="$httpOnly" type="boolean" defaultvalue="">
              <description>When TRUE the cookie will be made accessible only through the HTTP protocol.
This means that the cookie won't be accessible by scripting languages, such as JavaScript.</description>
            </parameter>
            <parameter name="$secure" type="boolean" defaultvalue="">
              <description>Indicates that the cookie should only be transmitted over a secure HTTPS connection from the client.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="get" returntype="mixed" static="true">
          <description>Get the value of a cookie.</description>
          <parameters>
            <parameter name="$name" type="string" defaultvalue="">
              <description>The cookie's name.</description>
            </parameter>
          </parameters>
          <returndescription>The cookie value or NULL if cookie doesn't exist.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="remove" returntype="boolean" static="true">
          <description>Remove a cookie.</description>
          <parameters>
            <parameter name="$name" type="string" defaultvalue="">
              <description>The cookie's name.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
      <scope type="protected"/>
      <scope type="private">
        <method name="getCookieName" returntype="string" static="true">
          <description>Get an application relative cookie name.</description>
          <parameters>
            <parameter name="$name" type="string" defaultvalue="">
              <description>The initial cookie name.</description>
            </parameter>
          </parameters>
          <returndescription>The cookie full name.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
    </methods>
  </class>
</manual>
