<?xml version="1.0" encoding="UTF-8"?>
<manual library="DEV" package="Apps" namespace="\views">
  <class name="appView" abstract="">
    <info>
      <version>3.1</version>
      <build>4</build>
      <datecreated>1408704023</datecreated>
      <daterevised>1438165297</daterevised>
      <extends/>
      <implements/>
      <throws/>
      <title>Application View</title>
      <description>Manages an application view object manager.</description>
      <deprecated/>
    </info>
    <constants>
      <const type="string" name="FILE_TYPE">
        <description>The view object type.</description>
      </const>
    </constants>
    <properties>
      <scope type="public"/>
      <scope type="protected"/>
      <scope type="private">
        <prop type="application" name="app">
          <description>The application object.</description>
        </prop>
        <prop type="string" name="name">
          <description>The view name.</description>
        </prop>
        <prop type="string" name="folder">
          <description>The view folder name.</description>
        </prop>
        <prop type="vcs" name="vcs">
          <description>The vcs manager object.</description>
        </prop>
        <prop type="array" name="sdk_dependencies">
          <description>The array of sdk dependencies.</description>
        </prop>
        <prop type="array" name="app_dependencies">
          <description>The array of application dependencies.</description>
        </prop>
      </scope>
    </properties>
    <methods>
      <scope type="public">
        <method name="__construct" returntype="void">
          <description>Constructor. Initializes the object's variables.</description>
          <parameters>
            <parameter name="$appID" type="integer" defaultvalue="">
              <description>The application id.</description>
            </parameter>
            <parameter name="$folder" type="string" defaultvalue="">
              <description>The view folder.
For root views, leave this field empty.
It is empty by default.</description>
            </parameter>
            <parameter name="$name" type="string" defaultvalue="">
              <description>The view name.
For creating new views, leave this empty.</description>
            </parameter>
          </parameters>
          <returndescription/>
          <throws/>
          <deprecated/>
        </method>
        <method name="create" returntype="boolean">
          <description>Creates a new application view.</description>
          <parameters>
            <parameter name="$viewName" type="string" defaultvalue="">
              <description>The view name.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getPHPCode" returntype="string">
          <description>Get the view's php code.</description>
          <parameters>
            <parameter name="$full" type="boolean" defaultvalue="">
              <description>If true, returns the entire php code as is form the file, otherwise it returns only the view code section.</description>
            </parameter>
          </parameters>
          <returndescription>The php source code.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="updatePHPCode" returntype="boolean">
          <description>Updates the view's php code.</description>
          <parameters>
            <parameter name="$code" type="string" defaultvalue="">
              <description>The view's new php code.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="updateInfo" returntype="boolean">
          <description>Update the view's information, source dependencies.</description>
          <parameters>
            <parameter name="$sdk_dependencies" type="array" defaultvalue="">
              <description>The view's dependencies to the Redback SDK.</description>
            </parameter>
            <parameter name="$app_dependencies" type="array" defaultvalue="">
              <description>The view's dependencies to the Application source.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getSingleDependencies" returntype="array">
          <description>Get all dependencies from the object given the dependencies' file.</description>
          <parameters>
            <parameter name="$depFile" type="string" defaultvalue="">
              <description>The dependencies' xml file.
You can load the trunk's file or the release's file.</description>
            </parameter>
            <parameter name="$rootRelative" type="boolean" defaultvalue="">
              <description>Whether the given path is root relative or not.
It is FALSE by default.</description>
            </parameter>
          </parameters>
          <returndescription>An array of all dependencies including the use 'path' and use 'alias'.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="validateSingleDependencies" returntype="mixed">
          <description>Validate module view dependencies comparing the uses with the imports.</description>
          <parameters/>
          <returndescription>TRUE if everything is OK.
An array of missing dependencies if there are missing dependencies.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getMetrics" returntype="array" static="true">
          <description>Get all source code's metrics data for the given object.</description>
          <parameters>
            <parameter name="$metFile" type="string" defaultvalue="">
              <description>The metrics' xml file.
You can load the trunk's file or the release's file.</description>
            </parameter>
          </parameters>
          <returndescription>An array of all metrics data. Including:
LOC
CLOC
SLOC-P
NOF
LOC-PF.
For more information on explanation, see the DEV\Tools\phpParser.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getCSS" returntype="string">
          <description>Gets the view's style code.</description>
          <parameters>
            <parameter name="$normalCss" type="boolean" defaultvalue="">
              <description>If true, return the parsed css code, else it returns the initial scss.
It is FALSE by default.</description>
            </parameter>
          </parameters>
          <returndescription>The style css.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="updateCSS" returntype="void">
          <description>Updates the view's css code.</description>
          <parameters>
            <parameter name="$code" type="string" defaultvalue="">
              <description>The view's new css code.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getJS" returntype="string">
          <description>Gets the view's javascript code.</description>
          <parameters/>
          <returndescription>The view's javascript code.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="updateJS" returntype="boolean">
          <description>Updates the view's javascript code.</description>
          <parameters>
            <parameter name="$code" type="string" defaultvalue="">
              <description>The view's new javascript code.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getHTML" returntype="string">
          <description>Gets the view's html content.</description>
          <parameters/>
          <returndescription>The html content.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="updateHTML" returntype="boolean">
          <description>Updates the view's html content.</description>
          <parameters>
            <parameter name="$html" type="string" defaultvalue="">
              <description>The view's new html content.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="run" returntype="mixed">
          <description>Runs the view from the trunk.</description>
          <parameters/>
          <returndescription>The view result.</returndescription>
          <throws>
            <exception>Exception</exception>
          </throws>
          <deprecated>Use loadFromTrunk() instead.</deprecated>
        </method>
        <method name="loadFromTrunk" returntype="mixed">
          <description>Runs the view from the trunk.</description>
          <parameters/>
          <returndescription>The view result.</returndescription>
          <throws>
            <exception>Exception</exception>
          </throws>
          <deprecated/>
        </method>
        <method name="loadFromWBranch" returntype="mixed">
          <description>Runs the view from the working branch.</description>
          <parameters/>
          <returndescription>The view result.</returndescription>
          <throws>
            <exception>Exception</exception>
          </throws>
          <deprecated/>
        </method>
        <method name="remove" returntype="boolean">
          <description>Remove the view from the application.</description>
          <parameters/>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getDependencies" returntype="void">
          <description>Gets the view dependencies.</description>
          <parameters/>
          <returndescription>An array of 'sdk' and 'app' dependencies.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
      <scope type="protected"/>
      <scope type="private">
        <method name="getDefaultSourceCode" returntype="string">
          <description>Gets the view's default source code.</description>
          <parameters/>
          <returndescription>The default template source code.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="setDependencies" returntype="void">
          <description>Sets the dependencies as a normalized dependency array.</description>
          <parameters>
            <parameter name="$sdk_dependencies" type="array" defaultvalue="">
              <description>The view's dependencies to the Redback SDK.</description>
            </parameter>
            <parameter name="$app_dependencies" type="array" defaultvalue="">
              <description>The view's dependencies to the Application source.</description>
            </parameter>
          </parameters>
          <returndescription/>
          <throws/>
          <deprecated/>
        </method>
        <method name="buildHeader" returntype="string">
          <description>Builds the php code header.</description>
          <parameters/>
          <returndescription>The php code header.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="buildSourceCode" returntype="string">
          <description>Builds the source code with the given header and body.</description>
          <parameters>
            <parameter name="$header" type="string" defaultvalue="">
              <description>The header code.</description>
            </parameter>
            <parameter name="$viewCode" type="string" defaultvalue="">
              <description>The body code.</description>
            </parameter>
          </parameters>
          <returndescription>The final source code.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="updateSingleDependencies" returntype="boolean">
          <description>Update source code dependencies.</description>
          <parameters>
            <parameter name="$code" type="string" defaultvalue="">
              <description>The source code to parse the dependencies from.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="updateMetrics" returntype="boolean">
          <description>Update the source code's metrics data.</description>
          <parameters>
            <parameter name="$code" type="string" defaultvalue="">
              <description>The source code to parse the metrics from.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="loadInfo" returntype="void">
          <description>Loads the view's info from the index file.</description>
          <parameters/>
          <returndescription/>
          <throws/>
          <deprecated/>
        </method>
        <method name="getItemID" returntype="string">
          <description>Gets the vcs item's id.</description>
          <parameters/>
          <returndescription>The item's hash id.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="createViewStructure" returntype="void">
          <description>Creates the view's inner file structure.</description>
          <parameters/>
          <returndescription/>
          <throws/>
          <deprecated/>
        </method>
      </scope>
    </methods>
  </class>
</manual>
