<?php
//#section#[header]
// Namespace
namespace API\Developer\components\sql;

// Use Important Headers
use \API\Platform\importer;
use \Exception;

// Check Platform Existance
if (!defined('_RB_PLATFORM_')) throw new Exception("Platform is not defined!");
//#section_end#
//#section#[class]
/**
 * @library	API
 * @package	Developer
 * @namespace	\components\sql
 * 
 * @copyright	Copyright (C) 2013 Skyworks SD. All rights reserved.
 */

importer::import("API", "Developer", "content::document::parsers::phpParser");
importer::import("API", "Developer", "components::sql::dvbDomain");
importer::import("API", "Developer", "misc::vcs");
importer::import("API", "Developer", "resources::paths");
importer::import("API", "Resources", "DOMParser");
importer::import("API", "Resources", "filesystem::fileManager");
importer::import("API", "Resources", "filesystem::folderManager");

use \API\Developer\content\document\parsers\phpParser;
use \API\Developer\components\sql\dvbDomain;
use \API\Developer\misc\vcs;
use \API\Developer\resources\paths;
use \API\Resources\DOMParser;
use \API\Resources\filesystem\fileManager;
use \API\Resources\filesystem\folderManager;

/**
 * Developer's database query manager.
 * 
 * Manages all database queries.
 * 
 * @version	{empty}
 * @created	July 3, 2013, 16:26 (EEST)
 * @revised	November 20, 2013, 15:52 (EET)
 */
class dvbQuery
{
	/**
	 * The query's file type.
	 * 
	 * @type	string
	 */
	const FILE_TYPE = "sql";
	
	/**
	 * The vcs manager object.
	 * 
	 * @type	vcs
	 */
	private $vcs;
	
	/**
	 * The query id.
	 * 
	 * @type	string
	 */
	protected $id;
	/**
	 * The production directory (latest).
	 * 
	 * @type	string
	 */
	protected $prdDirectory;
	
	/**
	 * The query access level.
	 * 
	 * @type	integer
	 */
	protected $accessLevel;
	
	/**
	 * The query title.
	 * 
	 * @type	string
	 */
	protected $title;
	/**
	 * The query description.
	 * 
	 * @type	string
	 */
	protected $description;
	/**
	 * The query attributes.
	 * 
	 * @type	array
	 */
	protected $attributes;
	
	/**
	 * The SQL plain query.
	 * 
	 * @type	string
	 */
	protected $query;
	/**
	 * The query domain.
	 * 
	 * @type	string
	 */
	protected $domain;
	
	/**
	 * Initializes the object's properties
	 * 
	 * @param	string	$domain
	 * 		The query domain.
	 * 
	 * @param	string	$id
	 * 		The query id. If empty, one is generated by random.
	 * 
	 * @return	void
	 */
	public function __construct($domain, $id = NULL)
	{
		$this->domain = $domain;
		
		$this->title = "";
		$this->description = "";
		$this->accessLevel = 1;
		$this->query = "";
		$this->attributes = array();
		
		$nsdomain = str_replace('.', '/', $this->domain);
		$this->prdDirectory = dvbDomain::EXPORT_PATH."/".$nsdomain."/";
		
		// Initialize new vcs
		$repository = paths::getDevPath()."/Repository/Core/";
		$this->vcs = new vcs($repository, $includeRelease = FALSE);
		
		// Create structure
		$this->vcs->createStructure();
		
		if (!empty($id))
		{
			$id = str_replace("q.", "", $id);
			$id = str_replace("q_", "", $id);
			$this->id = $id;
			$this->load();
		}
		else
			$this->id = rand();
	}	

	/**
	 * Creates a new sql query.
	 * 
	 * @param	string	$title
	 * 		The query title.
	 * 
	 * @param	string	$description
	 * 		The query description.
	 * 
	 * @return	boolean
	 * 		Creation status.
	 */
	public function create($title, $description)
	{
		// Normalize domain path
		$nsdomain = str_replace(".", "/", $this->domain);
		
		// Check if exists
		if (!is_dir(systemRoot.paths::getDevPath().dvbDomain::REPOSITORY_PATH."/".dvbDomain::INNER_PATH."/".$nsdomain))
			throw new Exception("Domain '$this->domain' not found.");
		
		// Create filename
		$this->title = $title;
		$this->description = $description;
		$this->name = $this->getName($this->id);
		
		
		// Create new vcs object and files
		$itemID = $this->getItemID();
		$itemPath = "/SQL/".$nsdomain."/";
		$itemName = $this->getName($this->id).".sql";
		$itemTrunkPath = $this->vcs->createItem($itemID, $itemPath, $itemName, $isFolder = TRUE);
		folderManager::create($itemTrunkPath);
		
		// Update item(
		$this->update($this->title, "", $this->description);
		
		return TRUE;
	}
	
	/**
	 * Gets the item id for the vcs.
	 * 
	 * @return	string
	 * 		{description}
	 */
	private function getItemID()
	{
		return "q".hash("md5", $this->id, FALSE);
	}
	
	/**
	 * Deletes the query from the library.
	 * 
	 * @return	boolean
	 * 		Deletion status.
	 */
	public function delete()
	{
	}
	
	/**
	 * Updates the query.
	 * 
	 * @param	string	$title
	 * 		The query title.
	 * 
	 * @param	string	$query
	 * 		The SQL plain query.
	 * 
	 * @param	string	$description
	 * 		The query description.
	 * 
	 * @param	boolean	$transaction
	 * 		Indicates whether the query is a transaction (many queries separated by ";").
	 * 
	 * @param	integer	$accessLevel
	 * 		The query access level.
	 * 
	 * @param	array	$attrs
	 * 		An array of attributes for the programmer to use the query.
	 * 
	 * @return	boolean
	 * 		Update status.
	 */
	public function update($title, $query = "", $description = "", $transaction = TRUE, $accessLevel = 1, $attrs = array())
	{
		// Update properties
		$this->title = $title;
		$this->query = phpParser::clearCode($query);
		$this->description = $description;
		$this->accessLevel = $accessLevel;
		$this->attributes = array();
		
		// Get attributes from query
		$expr = '/\$([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)/';
		preg_match_all($expr, $query, $queryAttributes);
		// Update attributes with given values
		foreach ($queryAttributes[1] as $attr)
			$this->attributes[$attr] = (isset($attrs[$attr]) ? $attrs[$attr] : "");
		
		// Get attributes from query
		$expr = '/\{([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)}/';
		preg_match_all($expr, $query, $queryAttributes);
		// Update attributes with given values
		foreach ($queryAttributes[1] as $attr)
			$this->attributes[$attr] = (isset($attrs[$attr]) ? $attrs[$attr] : "");
		
		// Update new vcs item info
		$itemID = $this->getItemID();
		$itemTrunkPath = $this->vcs->updateItem($itemID);
		
		// Update sql code
		fileManager::create($itemTrunkPath."/query.sql", $this->query, TRUE);
		
		// Update Index Info
		$this->updateIndexInfo();
		
		return TRUE;
	}
	
	private function updateIndexInfo()
	{
		// Update new vcs item index info
		$itemID = $this->getItemID();
		$itemTrunkPath = $this->vcs->updateItem($itemID);
		
		$parser = new DOMParser();
		try
		{
			$parser->load($itemTrunkPath."/index.xml");
			$root = $parser->evaluate("//query")->item(0);
		}
		catch (Exception $ex)
		{
			$root = $parser->create("query", "", $this->id);
			$parser->append($root);
			$parser->save($itemTrunkPath, "index.xml");
		}
		
		// Update values
		$title = $parser->evaluate("title", $root)->item(0);
		if (empty($title))
		{
			$title = $parser->create("title");
			$parser->append($root, $title);
		}
		$parser->nodeValue($title, $this->title);
		
		$desc = $parser->evaluate("description", $root)->item(0);
		if (empty($desc))
		{
			$desc = $parser->create("description");
			$parser->append($root, $desc);
		}
		$parser->nodeValue($desc, $this->description);
		
		$access = $parser->evaluate("access", $root)->item(0);
		if (empty($access))
		{
			$access = $parser->create("access");
			$parser->append($root, $access);
		}
		$parser->nodeValue($access, $this->accessLevel);
		
		$attributes = $parser->evaluate("attributes", $root)->item(0);
		if (empty($attributes))
		{
			$attributes = $parser->create("attributes");
			$parser->append($root, $attributes);
		}
		$parser->innerHTML($attrs, "");
		foreach ($this->attributes as $key => $value)
		{
			$attr = $parser->create("attr", $value, $key);
			$parser->append($attributes, $attr);
		}		
		
		// Update parser
		$parser->update();
	}
	
	/**
	 * Commits the object to the working branch.
	 * 
	 * @param	string	$description
	 * 		The commit description.
	 * 
	 * @return	boolean
	 * 		{description}
	 */
	public function commit($description)
	{
		return $this->vcsBranch->commit($this->getWorkingBranch(), $description);
	}
	
	/**
	 * Exports from the trunk to the latest. This is a temporary solution until the commit is finished (with the testing sql queries manager)
	 * 
	 * @return	boolean
	 * 		{description}
	 */
	public function export()
	{
		// Create files
		$fileName = $this->name;
		
		$itemID = $this->getItemID();
		$headPath = $this->vcs->getItemHeadPath($itemID)."/query.sql";
		if (!file_exists($headPath))
			return FALSE;
		$query = fileManager::get($headPath);
		fileManager::create(systemRoot.$this->prdDirectory.$this->name.".sql", $query, TRUE);
		
		// Update Index File
		$parser = new DOMParser();
		$parser->load($this->prdDirectory."index.xml", TRUE);
		
		// Get Base
		$base = $parser->evaluate("//queries")->item(0);
		
		// Get query node if exists
		$oldQueryElement = $parser->find("q.".$this->id);
		$newQueryElement = $parser->create("q", "", "q.".$this->id);
		$parser->attr($newQueryElement, "level", $this->accessLevel);
		
		if (!is_null($oldQueryElement))
			$parser->replace($oldQueryElement, $newQueryElement);
		else
			$parser->append($base, $newQueryElement);
			
		// Save File
		return $parser->save(systemRoot.$this->prdDirectory, "index.xml", TRUE);
	}
	
	/**
	 * Loads the query's information and content.
	 * 
	 * @return	void
	 */
	public function load()
	{
		$this->name = $this->getName($this->id);
		
		// Get trunk path
		$itemID = $this->getItemID();
		$trunkPath = $this->vcs->getItemTrunkPath($itemID);
		$this->query = fileManager::get($trunkPath."/query.sql");
			
		// Load Query Info
		$this->loadIndexInfo($this->getWorkingBranch());
	}
	
	/**
	 * Gets the executable query code.
	 * 
	 * @param	array	$attr
	 * 		An associative array of attributes for the query.
	 * 
	 * @return	string
	 * 		Query SQL code.
	 */
	public function getQuery($attr = array())
	{
		return $this->getExecutable($attr);
	}
	
	/**
	 * Builds and returns the executable query with the attributes given.
	 * 
	 * @param	array	$attr
	 * 		An associative array of attributes for the query.
	 * 
	 * @return	string
	 * 		The executable query.
	 */
	public function getExecutable($attr = array())
	{
		// Get plain query
		$query = phpParser::clearCode($this->query);
		
		// Replace Attributes
		foreach ($attr as $key => $value)
		{
			$query = str_replace("$".$key, $value, $query);
			$query = str_replace("{".$key."}", $value, $query);
		}
		
		return $query;
	}
	
	/**
	 * Loads all the information from the index.
	 * 
	 * @return	void
	 */
	protected function loadIndexInfo()
	{
		$itemID = $this->getItemID();
		$itemTrunkPath = $this->vcs->getItemTrunkPath($itemID);
		
		$parser = new DOMParser();
		try
		{
			$parser->load($itemTrunkPath."/index.xml", FALSE);
			$root = $parser->evaluate("//query")->item(0);
		}
		catch (Exception $ex)
		{
			return FALSE;
		}
		
		$this->name = $parser->attr($root, "id");
		$this->title = $parser->evaluate("title", $root)->item(0)->nodeValue;
		$this->description = $parser->evaluate("description", $root)->item(0)->nodeValue;
		$this->accessLevel = $parser->evaluate("access", $root)->item(0)->nodeValue;

		// Attributes
		$attributes = $parser->evaluate("attributes/attr", $root);
		$this->attributes = array();
		foreach($attributes as $attribute)
			$this->attributes[$attribute->getAttribute("id")] = $attribute->nodeValue;
	}
	
	/**
	 * Gets the query's filename.
	 * 
	 * @param	string	$id
	 * 		The query id.
	 * 
	 * @return	string
	 * 		The filename of the query.
	 */
	private function getName($id)
	{
		return "q.".hash("md5", "_q_".$id, FALSE);
	}
	
	/**
	 * Gets the query id.
	 * 
	 * @return	string
	 * 		Query id.
	 */
	public function getID()
	{
		return $this->id;
	}
	
	/**
	 * Gets the query title.
	 * 
	 * @return	string
	 * 		Query title.
	 */
	public function getTitle()
	{
		return $this->title;
	}

	/**
	 * Gets the query description.
	 * 
	 * @return	string
	 * 		Query description
	 */
	public function getDescription()
	{
		return $this->description;
	}
	
	/**
	 * Gets the query access level.
	 * 
	 * @return	integer
	 * 		Query access level.
	 */
	public function getAccessLevel()
	{
		return $this->accessLevel;
	}
	
	/**
	 * Gets the query attributes.
	 * 
	 * @return	array
	 * 		Query attributes array.
	 */
	public function getAttributes()
	{
		return $this->attributes;
	}
	
	/**
	 * Builds the executable query,
	 * 
	 * @return	string
	 * 		The executable query as php code.
	 */
	public function getPlainQuery()
	{
		return trim($this->query);
	}
	
	public function migrate()
	{
		// Create vcs structure
		$vcs = new vcs(paths::getDevPath()."/Repository/Core/", FALSE);
		$vcs->createStructure();
		
		// Get this object's contents
		$itemID = $this->getItemID();
		$old_itemTrunkPath = $this->vcs->getItemTrunkPath($itemID);
		
		// Create vcs item
		$nsdomain = str_replace(".", "/", $this->domain);
		$itemPath = "/SQL/".$nsdomain."/";
		$itemName = $this->getName($this->id).".sql";
		$itemTrunkPath = $vcs->createItem($itemID, $itemPath, $itemName, $isFolder = TRUE);
		$itemTrunkPath = $vcs->getItemTrunkPath($itemID);
		folderManager::copy($old_itemTrunkPath, dirname($itemTrunkPath));
	}
}
//#section_end#
?>