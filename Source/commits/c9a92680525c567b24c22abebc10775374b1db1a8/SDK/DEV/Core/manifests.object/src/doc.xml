<?xml version="1.0" encoding="UTF-8"?>
<manual library="DEV" package="Core" namespace="\">
  <class name="manifests" abstract="">
    <info>
      <version>3.0</version>
      <build>1</build>
      <datecreated>1424190832</datecreated>
      <daterevised>1435919164</daterevised>
      <extends/>
      <implements/>
      <throws/>
      <title>Platform SDK Manifest Manager</title>
      <description>Manages all manifests that are going to be used by the application developers.
Foreach manifest, a list of packages are assigned. The application will have access to those packages through the manifest rules.
The application user will be notified of the manifest use as "Application Requests Access".</description>
      <deprecated/>
    </info>
    <constants/>
    <properties>
      <scope type="public"/>
      <scope type="protected"/>
      <scope type="private">
        <prop type="DOMParser" name="xmlParser">
          <description>The DOMParser object that edits the manifest file.</description>
        </prop>
      </scope>
    </properties>
    <methods>
      <scope type="public">
        <method name="__construct" returntype="void">
          <description>Initialize the class and load the manifest file.
The file will be created from scratch, if accidentally erased.</description>
          <parameters/>
          <returndescription/>
          <throws/>
          <deprecated/>
        </method>
        <method name="getAll" returntype="array">
          <description>Get all manifests by id.</description>
          <parameters/>
          <returndescription>An array of all manifests information.
See info() for more information on the return context.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="info" returntype="array">
          <description>Get information about a manifest given the manifest id.</description>
          <parameters>
            <parameter name="$mfID" type="string" defaultvalue="">
              <description>The manifest id to get the info for.</description>
            </parameter>
          </parameters>
          <returndescription>An array of manifest information
Includes info (name and enabled status) and a list of all sdk packages grouped by library.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="create" returntype="boolean">
          <description>Create new manifest entry.</description>
          <parameters>
            <parameter name="$name" type="string" defaultvalue="">
              <description>The manifest name.
It must be unique.</description>
            </parameter>
            <parameter name="$packages" type="array" defaultvalue="">
              <description>An array of all packages grouped by library.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="setEnabled" returntype="boolean">
          <description>Set the enable status of the manifest.</description>
          <parameters>
            <parameter name="$mfID" type="string" defaultvalue="">
              <description>The manifest id to update.</description>
            </parameter>
            <parameter name="$enabled" type="boolean" defaultvalue="">
              <description>The manifest enabled status.
Default value is TRUE.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="setPrivate" returntype="boolean">
          <description>Set the private status of the manifest.
Private manifest packages are used only by the Redback team as private resources.</description>
          <parameters>
            <parameter name="$mfID" type="string" defaultvalue="">
              <description>The manifest id to update.</description>
            </parameter>
            <parameter name="$private" type="boolean" defaultvalue="">
              <description>The manifest private status.
Default value is FALSE.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="setPlans" returntype="boolean">
          <description>Set manifest plan permissions.</description>
          <parameters>
            <parameter name="$mfID" type="string" defaultvalue="">
              <description>The manifest id to update.</description>
            </parameter>
            <parameter name="$premium" type="boolean" defaultvalue="">
              <description>Premium plan permission.
Default value is FALSE.</description>
            </parameter>
            <parameter name="$retail" type="boolean" defaultvalue="">
              <description>Retail plan permission.
Default value is FALSE.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="update" returntype="boolean">
          <description>Update the manifest information and packages.</description>
          <parameters>
            <parameter name="$mfID" type="string" defaultvalue="">
              <description>The manifest id to update.</description>
            </parameter>
            <parameter name="$packages" type="array" defaultvalue="">
              <description>An array of all packages grouped by library.
It is empty by default.</description>
            </parameter>
            <parameter name="$newName" type="string" defaultvalue="">
              <description>The new name of the manifest (if you wish to change it).
Leave empty for no changes.
It is empty by default.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="remove" returntype="boolean">
          <description>Remove the manifest from the list.</description>
          <parameters>
            <parameter name="$mfID" type="string" defaultvalue="">
              <description>The manifest id to be removed.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="validate" returntype="boolean" static="true">
          <description>Check whether a given library package is included in the given manifest id and the manifest is enabled.</description>
          <parameters>
            <parameter name="$mfID" type="string" defaultvalue="">
              <description>The manifest id.</description>
            </parameter>
            <parameter name="$library" type="string" defaultvalue="">
              <description>The library name.</description>
            </parameter>
            <parameter name="$package" type="string" defaultvalue="">
              <description>The package name.</description>
            </parameter>
          </parameters>
          <returndescription>True if the package is valid, false otherwise.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
      <scope type="protected"/>
      <scope type="private"/>
    </methods>
  </class>
</manual>
