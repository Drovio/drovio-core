<?xml version="1.0" encoding="UTF-8"?>
<manual library="API" package="Profile" namespace="\">
  <class name="account" abstract="">
    <info>
      <version>1.0</version>
      <build>2</build>
      <datecreated>1373017114</datecreated>
      <daterevised>1407751334</daterevised>
      <extends/>
      <implements/>
      <throws/>
      <title>Account Manager Class</title>
      <description>Manages the active account.</description>
      <deprecated/>
    </info>
    <constants/>
    <properties>
      <scope type="public"/>
      <scope type="protected"/>
      <scope type="private">
        <prop type="array" name="accountData" static="true">
          <description>All the stored account data.</description>
        </prop>
      </scope>
    </properties>
    <methods>
      <scope type="public">
        <method name="getAccountFolder" returntype="mixed" static="true">
          <description>Gets the account's folder. The folder is created if doesn't exist.</description>
          <parameters/>
          <returndescription>The account folder path.
If there is no active account, it returns FALSE.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getServicesFolder" returntype="void" static="true">
          <description>Get the account's service root folder.</description>
          <parameters>
            <parameter name="$serviceName" type="string" defaultvalue="">
              <description>The service name.</description>
            </parameter>
          </parameters>
          <returndescription>The account service folder path.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="isAdmin" returntype="boolean" static="true">
          <description>Checks whether the account is admin.</description>
          <parameters/>
          <returndescription>True if admin, false otherwise (shared).</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getAccountTitle" returntype="string" static="true">
          <description>Gets the account title for the logged in account.</description>
          <parameters/>
          <returndescription>The account display title.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="info" returntype="array" static="true">
          <description>Gets the account info.</description>
          <parameters/>
          <returndescription>Returns an array of the account information.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
      <scope type="protected"/>
      <scope type="private">
        <method name="getAccountValue" returntype="string" static="true">
          <description>Gets an account value from the session.
If the session is not set yet, updates from the database.</description>
          <parameters>
            <parameter name="$name" type="string" defaultvalue="">
              <description>The value name.</description>
            </parameter>
          </parameters>
          <returndescription>The account value.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getInfo" returntype="array" static="true">
          <description>Gets an account's information.</description>
          <parameters>
            <parameter name="$accountID" type="integer" defaultvalue="">
              <description>The account id to get information for.</description>
            </parameter>
          </parameters>
          <returndescription>Array of account data.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getFolderID" returntype="string" static="true">
          <description>Gets the unique folder id for the requested use.</description>
          <parameters>
            <parameter name="$prefix" type="string" defaultvalue="">
              <description>The prefix of the folder.</description>
            </parameter>
            <parameter name="$folderID" type="string" defaultvalue="">
              <description>The id to be hashed.</description>
            </parameter>
            <parameter name="$extension" type="string" defaultvalue="">
              <description>The extension of the folder (if any).</description>
            </parameter>
          </parameters>
          <returndescription>The folder name.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
    </methods>
  </class>
</manual>
