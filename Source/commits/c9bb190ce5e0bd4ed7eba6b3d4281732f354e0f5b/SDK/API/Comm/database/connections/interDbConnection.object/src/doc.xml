<?xml version="1.0" encoding="UTF-8"?>
<manual library="API" package="Comm" namespace="\database\connections">
  <class name="interDbConnection" abstract="" namespace="">
    <info>
      <version/>
      <datecreated>1366713120</datecreated>
      <daterevised>1381851733</daterevised>
      <extends>\API\Comm\database\connections\dbConnection</extends>
      <implements/>
      <throws/>
      <title>Internal Database Connection</title>
      <description>Connects to system's database and executes the queries</description>
      <deprecated/>
    </info>
    <constants/>
    <properties>
      <scope type="public"/>
      <scope type="protected"/>
      <scope type="private">
        <prop type="array" name="settings" static="true">
          <description>The database server settings.</description>
        </prop>
      </scope>
    </properties>
    <methods>
      <scope type="public">
        <method name="__construct" returntype="void">
          <description>Constructor Method.
Initializes the connection.</description>
          <parameters/>
          <deprecated/>
          <returndescription/>
          <throws/>
        </method>
        <method name="execute" returntype="mixed">
          <description>Executes a dbQuery to the redback database.</description>
          <parameters>
            <parameter name="$dbQuery" type="dbQuery" defaultvalue="">
              <description>The query to be executed.</description>
            </parameter>
            <parameter name="$attr" type="array" defaultvalue="">
              <description>A number of attributes to be passed as arguments to the query.
It is an associative array.</description>
            </parameter>
          </parameters>
          <returndescription>Returns FALSE on failure.
For successful SELECT, SHOW, DESCRIBE or EXPLAIN queries mysqli_query() will return a mysqli_result object.
For other successful queries mysqli_query() will return TRUE.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
      <scope type="protected"/>
      <scope type="private">
        <method name="getDbServer" returntype="string">
          <description>Gets the active database server according to url.</description>
          <parameters/>
          <deprecated/>
          <returndescription>Returns the database server.</returndescription>
          <throws/>
        </method>
        <method name="getServerSettings" returntype="array">
          <description>Gets the server settings from the credentials.</description>
          <parameters/>
          <returndescription>An array of settings according to xml schema.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
    </methods>
  </class>
</manual>
