<?xml version="1.0" encoding="UTF-8"?>
<manual library="AEL" package="Resources" namespace="\account">
  <class name="fileManager" abstract="">
    <info>
      <version>1.0</version>
      <build>2</build>
      <datecreated>1417422312</datecreated>
      <daterevised>1417516712</daterevised>
      <extends>
        <object>\API\Resources\filesystem\fileManager</object>
      </extends>
      <implements/>
      <throws/>
      <title>Application File manager for accounts</title>
      <description>Manages all account files for the current running application.

NOTE: For each call it checks if there is an active application. If not, returns false every time.
All paths are relative to the application root folder.</description>
      <deprecated/>
    </info>
    <constants/>
    <properties>
      <scope type="public"/>
      <scope type="protected"/>
      <scope type="private"/>
    </properties>
    <methods>
      <scope type="public">
        <method name="create" returntype="boolean" static="true">
          <description>Creates a new file in the specified location in the account application folder.</description>
          <parameters>
            <parameter name="$file" type="string" defaultvalue="">
              <description>The file path.</description>
            </parameter>
            <parameter name="$contents" type="string" defaultvalue="">
              <description>The text file contents.</description>
            </parameter>
            <parameter name="$recursive" type="boolean" defaultvalue="">
              <description>Indicates whether the file will create the path's folders if don't exist.
It is TRUE by default.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="remove" returntype="boolean" static="true">
          <description>Remove a file from the specified location in the account application folder.</description>
          <parameters>
            <parameter name="$file" type="string" defaultvalue="">
              <description>The file path to be removed.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="get" returntype="mixed" static="true">
          <description>Get the contents of a file from the specified location in the account application folder.</description>
          <parameters>
            <parameter name="$file" type="string" defaultvalue="">
              <description>The file path to get the contents from.</description>
            </parameter>
          </parameters>
          <returndescription>The file contents or NULL if the file does not exist.
FALSE if no active application is found.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="put" returntype="boolean" static="true">
          <description>Put contents to a file from the specified location in the account application folder.</description>
          <parameters>
            <parameter name="$file" type="string" defaultvalue="">
              <description>The file path to put the contents to.</description>
            </parameter>
            <parameter name="$contents" type="string" defaultvalue="">
              <description>The contents to be written.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="copy" returntype="boolean" static="true">
          <description>Copy the contents of a file to another file in the specified location in the account application folder.</description>
          <parameters>
            <parameter name="$from_file" type="string" defaultvalue="">
              <description>The source file path.</description>
            </parameter>
            <parameter name="$to_file" type="string" defaultvalue="">
              <description>The destination file path.</description>
            </parameter>
            <parameter name="$preventOverwrite" type="boolean" defaultvalue="">
              <description>If set to TRUE the destination file will not be overwritten.
It is FALSE by default.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="move" returntype="boolean" static="true">
          <description>Move a file to another location in the specified location in the account application folder.</description>
          <parameters>
            <parameter name="$from_file" type="string" defaultvalue="">
              <description>The source file path.</description>
            </parameter>
            <parameter name="$to_file" type="string" defaultvalue="">
              <description>The destination file path.</description>
            </parameter>
            <parameter name="$preventOverwrite" type="boolean" defaultvalue="">
              <description>If set to TRUE the destination file will not be overwritten.
It is FALSE by default.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getApplicationPath" returntype="mixed" static="true">
          <description>Get the application service path inside the account folder.</description>
          <parameters/>
          <returndescription>The application path or NULL if there is no active application.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
      <scope type="protected"/>
      <scope type="private"/>
    </methods>
  </class>
</manual>
