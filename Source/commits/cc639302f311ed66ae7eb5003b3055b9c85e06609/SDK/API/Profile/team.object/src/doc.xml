<?xml version="1.0" encoding="UTF-8"?>
<manual library="API" package="Profile" namespace="\">
  <class name="team" abstract="">
    <info>
      <version>7.0</version>
      <build>3</build>
      <datecreated>1406886412</datecreated>
      <daterevised>1450291301</daterevised>
      <extends>
        <object>\API\Login\team</object>
      </extends>
      <implements/>
      <throws/>
      <title>Team Manager Class</title>
      <description>Manages the active team and the account's all teams.</description>
      <deprecated/>
    </info>
    <constants/>
    <properties>
      <scope type="public"/>
      <scope type="protected"/>
      <scope type="private">
        <prop type="array" name="teamData" static="true">
          <description>All the team data.</description>
        </prop>
      </scope>
    </properties>
    <methods>
      <scope type="public">
        <method name="info" returntype="array" static="true">
          <description>Get all the public information about a team.
If the team is the current account team, include private information.</description>
          <parameters>
            <parameter name="$teamID" type="integer" defaultvalue="">
              <description>The team id.
Leave empty for current team id.
It is empty by default.</description>
            </parameter>
          </parameters>
          <returndescription>An array of the team data.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="updateProfileImage" returntype="boolean" static="true">
          <description>Update the team profile image.</description>
          <parameters>
            <parameter name="$image" type="data" defaultvalue="">
              <description>The image data.
The image should be in png format.</description>
            </parameter>
            <parameter name="$teamID" type="integer" defaultvalue="">
              <description>The team id.
If empty or in secure mode this will be the current team.
It is empty by default.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getTeamName" returntype="string" static="true">
          <description>Get the current team's name.</description>
          <parameters/>
          <returndescription>The current team's name.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getTeamUname" returntype="string" static="true">
          <description>Get the current team's unique name.</description>
          <parameters/>
          <returndescription>The current team's unique name.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getTeamFolder" returntype="mixed" static="true">
          <description>Gets the team's profile folder. The folder is created if doesn't exist.</description>
          <parameters>
            <parameter name="$teamID" type="integer" defaultvalue="">
              <description>The team id to get the folder for.</description>
            </parameter>
          </parameters>
          <returndescription>The team folder path. If there is no active team, it returns FALSE.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getProfileUrl" returntype="string" static="true">
          <description>Get a file url relative to team's profile url.</description>
          <parameters>
            <parameter name="$innerPath" type="string" defaultvalue="">
              <description>The inner file path.</description>
            </parameter>
            <parameter name="$teamID" type="integer" defaultvalue="">
              <description>The team id.
Leave empty for current team id.
It is empty by default.</description>
            </parameter>
          </parameters>
          <returndescription>The profile's file url.
NULL if the file doesn't exist.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getServicesFolder" returntype="string" static="true">
          <description>Get a service's folder inside the team root folder.</description>
          <parameters>
            <parameter name="$serviceName" type="string" defaultvalue="">
              <description>The service name.</description>
            </parameter>
            <parameter name="$teamID" type="integer" defaultvalue="">
              <description>The team id to get the service folder for.</description>
            </parameter>
            <parameter name="$systemAppData" type="boolean" defaultvalue="">
              <description>This indicates the service folder as System App and will be placed in a special folder.
It is FALSE by default.</description>
            </parameter>
          </parameters>
          <returndescription>The team service folder path.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
      <scope type="protected"/>
      <scope type="private">
        <method name="getTeamValue" returntype="string" static="true">
          <description>Gets a team value from the session. If the session is not set yet, updates from the database.</description>
          <parameters>
            <parameter name="$name" type="string" defaultvalue="">
              <description>The value name.</description>
            </parameter>
          </parameters>
          <returndescription>The team value.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getFolderID" returntype="string" static="true">
          <description>Gets the unique folder id for the requested use.</description>
          <parameters>
            <parameter name="$prefix" type="string" defaultvalue="">
              <description>The prefix of the folder.</description>
            </parameter>
            <parameter name="$folderID" type="string" defaultvalue="">
              <description>The id to be hashed.</description>
            </parameter>
            <parameter name="$extension" type="string" defaultvalue="">
              <description>The extension of the folder (if any).</description>
            </parameter>
          </parameters>
          <returndescription>The folder name.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
    </methods>
  </class>
</manual>
