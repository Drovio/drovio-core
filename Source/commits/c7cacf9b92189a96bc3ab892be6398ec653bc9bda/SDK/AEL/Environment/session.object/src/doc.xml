<?xml version="1.0" encoding="UTF-8"?>
<manual library="AEL" package="Environment" namespace="\">
  <class name="session" abstract="">
    <info>
      <version>1.0</version>
      <build>1</build>
      <datecreated>1445273024</datecreated>
      <daterevised>1445335731</daterevised>
      <extends>
        <object>\ESS\Environment\session</object>
      </extends>
      <implements/>
      <throws/>
      <title>Application Session Manager</title>
      <description>Manages session storage on behalf of the application.
All the variables are an a specific application namespace prefix.</description>
      <deprecated/>
    </info>
    <constants/>
    <properties>
      <scope type="public"/>
      <scope type="protected"/>
      <scope type="private"/>
    </properties>
    <methods>
      <scope type="public">
        <method name="get" returntype="string" static="true">
          <description>Get a session variable value for the application.</description>
          <parameters>
            <parameter name="$name" type="string" defaultvalue="">
              <description>The name of the variable.</description>
            </parameter>
            <parameter name="$default" type="mixed" defaultvalue="">
              <description>The value that will be returned if the variable doesn't exist.</description>
            </parameter>
            <parameter name="$namespace" type="string" defaultvalue="">
              <description>The namespace of the session variable.</description>
            </parameter>
          </parameters>
          <returndescription>The session value.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="set" returntype="mixed" static="true">
          <description>Set a session variable value.</description>
          <parameters>
            <parameter name="$name" type="string" defaultvalue="">
              <description>The name of the variable.</description>
            </parameter>
            <parameter name="$value" type="mixed" defaultvalue="">
              <description>The value with which the variable will be set.</description>
            </parameter>
            <parameter name="$namespace" type="string" defaultvalue="">
              <description>The namespace of the session variable.</description>
            </parameter>
          </parameters>
          <returndescription>The old value of the variable, or NULL if not set.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="has" returntype="boolean" static="true">
          <description>Check if there is a session variable.</description>
          <parameters>
            <parameter name="$name" type="string" defaultvalue="">
              <description>The variable name.</description>
            </parameter>
            <parameter name="$namespace" type="string" defaultvalue="">
              <description>The namespace of the session variable.</description>
            </parameter>
          </parameters>
          <returndescription>True if the variable is set, false otherwise.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="clear" returntype="void" static="true">
          <description>Deletes a session variable</description>
          <parameters>
            <parameter name="$name" type="" defaultvalue="">
              <description/>
            </parameter>
            <parameter name="$namespace" type="" defaultvalue="">
              <description/>
            </parameter>
          </parameters>
          <returndescription/>
          <throws/>
          <deprecated>Use remove() instead.</deprecated>
        </method>
        <method name="remove" returntype="mixed" static="true">
          <description>Removes a session variable.</description>
          <parameters>
            <parameter name="$name" type="string" defaultvalue="">
              <description>The variable name.</description>
            </parameter>
            <parameter name="$namespace" type="string" defaultvalue="">
              <description>The namespace of the session variable.</description>
            </parameter>
          </parameters>
          <returndescription>The old value of the variable, or NULL if not set.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="clearSet" returntype="boolean" static="true">
          <description>Delete a set of session variables under the same namespace.</description>
          <parameters>
            <parameter name="$namespace" type="string" defaultvalue="">
              <description>The namespace to be cleared.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
      <scope type="protected"/>
      <scope type="private">
        <method name="getApplicationNamespace" returntype="string" static="true">
          <description>Get the session namespace with application identifier prefix.</description>
          <parameters>
            <parameter name="$namespace" type="string" defaultvalue="">
              <description>The namespace name.</description>
            </parameter>
          </parameters>
          <returndescription>The application-specific namespace.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
    </methods>
  </class>
</manual>
