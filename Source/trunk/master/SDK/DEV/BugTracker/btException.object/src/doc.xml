<?xml version="1.0" encoding="UTF-8"?>
<manual library="DEV" package="BugTracker" namespace="\">
  <class name="btException" abstract="">
    <info>
      <version>0.1</version>
      <build>2</build>
      <datecreated>1413808683</datecreated>
      <daterevised>1420448855</daterevised>
      <extends/>
      <implements/>
      <throws/>
      <title>Bug Tracker Exception</title>
      <description>This class is responsible managing a project exception and for for logging a new Exception.</description>
      <deprecated>Use \BT\Issues\btException instead.</deprecated>
    </info>
    <constants/>
    <properties>
      <scope type="public"/>
      <scope type="protected"/>
      <scope type="private">
        <prop type="integer" name="projectID">
          <description>The project id.</description>
        </prop>
        <prop type="integer" name="exceptionID">
          <description>The exception id.</description>
        </prop>
      </scope>
    </properties>
    <methods>
      <scope type="public">
        <method name="__construct" returntype="void">
          <description>Initialize the exception with the project id.</description>
          <parameters>
            <parameter name="$projectID" type="integer" defaultvalue="">
              <description>The exception's project id.</description>
            </parameter>
            <parameter name="$exceptionID" type="integer" defaultvalue="">
              <description>The exception id (for editing existing exceptions).
Leave empty for new exceptions.
It is empty by default.</description>
            </parameter>
          </parameters>
          <returndescription/>
          <throws/>
          <deprecated/>
        </method>
        <method name="log" returntype="boolean">
          <description>Log a new exception to the project.</description>
          <parameters>
            <parameter name="$exception" type="Exception" defaultvalue="">
              <description>The exception to log.
The function will get all the needed information from the exception object.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="assignToIssue" returntype="boolean">
          <description>Assign the exception to an existing issue.</description>
          <parameters>
            <parameter name="$issueID" type="integer" defaultvalue="">
              <description>The issue id to assign the exception.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getAll" returntype="array" static="true">
          <description>Get all project exceptions.</description>
          <parameters/>
          <returndescription>An array of all exceptions in the given project.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
      <scope type="protected"/>
      <scope type="private">
        <method name="getServerInfo" returntype="string">
          <description>Get all server information in json format.</description>
          <parameters/>
          <returndescription>The server information, including request parameters (for get and post methods) in json format.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getExtraInfo" returntype="string">
          <description>Get all extra information in json format.</description>
          <parameters/>
          <returndescription>The extra information in json format.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
    </methods>
  </class>
</manual>
