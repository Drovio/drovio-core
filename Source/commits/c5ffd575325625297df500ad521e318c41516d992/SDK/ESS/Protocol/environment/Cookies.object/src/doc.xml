<?xml version="1.0" encoding="UTF-8"?>
<manual library="ESS" package="Protocol" namespace="\environment">
  <class name="Cookies" abstract="">
    <info>
      <version>0.1</version>
      <build>2</build>
      <datecreated>1406654930</datecreated>
      <daterevised>1414069477</daterevised>
      <extends/>
      <implements/>
      <throws/>
      <title>System Cookie's Manager</title>
      <description>This is the system's cookie manager.
Creates, deletes and reads red cookies.</description>
      <deprecated>Use \ESS\Environment\cookies instead.</deprecated>
    </info>
    <constants/>
    <properties>
      <scope type="public"/>
      <scope type="protected"/>
      <scope type="private"/>
    </properties>
    <methods>
      <scope type="public">
        <method name="set" returntype="void" static="true">
          <description>Create a new cookie or update an existing one.</description>
          <parameters>
            <parameter name="$name" type="string" defaultvalue="">
              <description>The cookie's name.</description>
            </parameter>
            <parameter name="$value" type="string" defaultvalue="">
              <description>The cookie's value.</description>
            </parameter>
            <parameter name="$expiration" type="integer" defaultvalue="">
              <description>The expiration of the cookie in seconds.
If set to 0, the cookie will expire at the end of the session.</description>
            </parameter>
            <parameter name="$secure" type="boolean" defaultvalue="">
              <description>Indicates that the cookie should only be transmitted over a secure HTTPS connection from the client.</description>
            </parameter>
            <parameter name="$httpOly" type="boolean" defaultvalue="">
              <description>When TRUE the cookie will be made accessible only through the HTTP protocol.
This means that the cookie won't be accessible by scripting languages, such as JavaScript.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="get" returntype="mixed" static="true">
          <description>Get the value of a cookie.</description>
          <parameters>
            <parameter name="$name" type="string" defaultvalue="">
              <description>The cookie's name.</description>
            </parameter>
          </parameters>
          <returndescription>The cookie value or NULL if cookie doesn't exist.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="delete" returntype="boolean" static="true">
          <description>Delete a cookie</description>
          <parameters>
            <parameter name="$name" type="string" defaultvalue="">
              <description>The cookie's name.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="clear" returntype="void" static="true">
          <description>Delete all cookies</description>
          <parameters/>
          <returndescription/>
          <throws/>
          <deprecated>This function is forbidden and won't do anything.</deprecated>
        </method>
      </scope>
      <scope type="protected"/>
      <scope type="private">
        <method name="setCookie" returntype="boolean" static="true">
          <description>Create a new cookie with the full parameters.</description>
          <parameters>
            <parameter name="$name" type="string" defaultvalue="">
              <description>The cookie's name.</description>
            </parameter>
            <parameter name="$value" type="string" defaultvalue="">
              <description>The cookie's value.</description>
            </parameter>
            <parameter name="$expiration" type="integer" defaultvalue="">
              <description>The expiration of the cookie in seconds.
If set to 0, the cookie will expire at the end of the session.</description>
            </parameter>
            <parameter name="$path" type="string" defaultvalue="">
              <description>The path on the server in which the cookie will be available on.</description>
            </parameter>
            <parameter name="$domain" type="string" defaultvalue="">
              <description>The domain that the cookie is available to.</description>
            </parameter>
            <parameter name="$secure" type="boolean" defaultvalue="">
              <description>Indicates that the cookie should only be transmitted over a secure HTTPS connection from the client.</description>
            </parameter>
            <parameter name="$httpOly" type="boolean" defaultvalue="">
              <description>When TRUE the cookie will be made accessible only through the HTTP protocol.
This means that the cookie won't be accessible by scripting languages, such as JavaScript.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
    </methods>
  </class>
</manual>
