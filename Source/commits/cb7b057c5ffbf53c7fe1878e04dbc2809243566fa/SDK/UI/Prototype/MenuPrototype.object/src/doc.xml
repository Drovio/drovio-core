<?xml version="1.0" encoding="UTF-8"?>
<manual library="UI" package="Prototype" namespace="\">
  <class name="MenuPrototype" abstract="">
    <info>
      <version>0.1</version>
      <build>1</build>
      <datecreated>1438076625</datecreated>
      <daterevised>1438076625</daterevised>
      <extends>
        <object>\UI\Prototype\UIObjectPrototype</object>
      </extends>
      <implements/>
      <throws/>
      <title>Menu Prototype</title>
      <description>This is the menu prototype (implements the composite pattern).
All menus (and extensions of it) must inherit this prototype and build a proper menu object.</description>
      <deprecated/>
    </info>
    <constants/>
    <properties>
      <scope type="public"/>
      <scope type="protected">
        <prop type="DOMElement" name="menuList">
          <description>The menulist of this menu.</description>
        </prop>
      </scope>
      <scope type="private"/>
    </properties>
    <methods>
      <scope type="public">
        <method name="build" returntype="void">
          <description>Builds the spine of the menu and sets the UIObject.</description>
          <parameters>
            <parameter name="$id" type="string" defaultvalue="">
              <description>The menu id.</description>
            </parameter>
            <parameter name="$class" type="string" defaultvalue="">
              <description>The menu class.</description>
            </parameter>
          </parameters>
          <returndescription/>
          <throws/>
          <deprecated/>
        </method>
        <method name="getMenuItem" returntype="DOMElement">
          <description>Creates a menuItem.</description>
          <parameters>
            <parameter name="$id" type="string" defaultvalue="">
              <description>The id of the menuItem.</description>
            </parameter>
            <parameter name="$class" type="string" defaultvalue="">
              <description>The class of the menuItem.</description>
            </parameter>
            <parameter name="$context" type="mixed" defaultvalue="">
              <description>The context of the menuItem.</description>
            </parameter>
          </parameters>
          <returndescription>The menu item created.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="createMenuItem" returntype="DOMElement">
          <description>Creates a menuItem and appends it to the menuList.</description>
          <parameters>
            <parameter name="$id" type="string" defaultvalue="">
              <description>The id of the menuItem.</description>
            </parameter>
            <parameter name="$class" type="string" defaultvalue="">
              <description>The class of the menuItem.</description>
            </parameter>
            <parameter name="$context" type="mixed" defaultvalue="">
              <description>The context of the menuItem.</description>
            </parameter>
          </parameters>
          <returndescription>The menu item created.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="insertMenuItem" returntype="MenuPrototype">
          <description>Insert a ready menu item generated by getMenuItem() or a product.</description>
          <parameters>
            <parameter name="$item" type="DOMElement" defaultvalue="">
              <description>The menu item to be inserted.</description>
            </parameter>
          </parameters>
          <returndescription>The MenuPrototype object.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="setStaticNav" returntype="void" static="true">
          <description>Adds static navigation handler.</description>
          <parameters>
            <parameter name="$element" type="DOMElement" defaultvalue="">
              <description>The element to receive the navigation handler.</description>
            </parameter>
            <parameter name="$ref" type="string" defaultvalue="">
              <description>The target's id to perform the action.</description>
            </parameter>
            <parameter name="$targetcontainer" type="string" defaultvalue="">
              <description>The container's class of the group in which the target resides.</description>
            </parameter>
            <parameter name="$targetgroup" type="string" defaultvalue="">
              <description>The group of the items to handle together when performing the action to the target. For more information, see the NavigatorProtocol.</description>
            </parameter>
            <parameter name="$navgroup" type="string" defaultvalue="">
              <description>The group of navigation items, among which the handler element will be selected</description>
            </parameter>
            <parameter name="$display" type="string" defaultvalue="">
              <description>Defines the type of action for the rest items of the group. For more information, see the NavigatorProtocol.</description>
            </parameter>
          </parameters>
          <returndescription/>
          <throws/>
          <deprecated/>
        </method>
        <method name="setNavigationGroup" returntype="" static="true">
          <description>Adds a navigation group selector to the given element.</description>
          <parameters>
            <parameter name="$element" type="DOMElement" defaultvalue="">
              <description>The group selector element.</description>
            </parameter>
            <parameter name="$selector" type="string" defaultvalue="">
              <description>The selector.</description>
            </parameter>
          </parameters>
          <returndescription/>
          <throws/>
          <deprecated/>
        </method>
        <method name="getNavigationGroup" returntype="DOMElement" static="true">
          <description>Creates a static navigation group.
For more information, see the NavigatorProtocol.</description>
          <parameters>
            <parameter name="$id" type="string" defaultvalue="">
              <description>The id of the navigation group.</description>
            </parameter>
            <parameter name="$groupSelector" type="string" defaultvalue="">
              <description>The static navigation selector for the group.</description>
            </parameter>
          </parameters>
          <returndescription>The navigation group element.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="addNavigation" returntype="void" static="true">
          <description/>
          <parameters>
            <parameter name="$element" type="" defaultvalue="">
              <description/>
            </parameter>
            <parameter name="$ref" type="" defaultvalue="">
              <description/>
            </parameter>
            <parameter name="$targetcontainer" type="" defaultvalue="">
              <description/>
            </parameter>
            <parameter name="$targetgroup" type="" defaultvalue="">
              <description/>
            </parameter>
            <parameter name="$navgroup" type="" defaultvalue="">
              <description/>
            </parameter>
            <parameter name="$display" type="" defaultvalue="">
              <description/>
            </parameter>
          </parameters>
          <returndescription/>
          <throws/>
          <deprecated>Use setStaticNav() instead.</deprecated>
        </method>
        <method name="addNavigationSelector" returntype="void" static="true">
          <description/>
          <parameters>
            <parameter name="$element" type="" defaultvalue="">
              <description/>
            </parameter>
            <parameter name="$selector" type="" defaultvalue="">
              <description/>
            </parameter>
          </parameters>
          <returndescription/>
          <throws/>
          <deprecated>Use setNavigationGroup() instead.</deprecated>
        </method>
        <method name="getNavProtocol" returntype="void">
          <description/>
          <parameters/>
          <returndescription/>
          <throws/>
          <deprecated>Use class functions instead.</deprecated>
        </method>
      </scope>
      <scope type="protected"/>
      <scope type="private"/>
    </methods>
  </class>
</manual>
