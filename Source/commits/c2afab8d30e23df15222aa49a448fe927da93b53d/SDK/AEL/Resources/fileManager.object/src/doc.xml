<?xml version="1.0" encoding="UTF-8"?>
<manual library="AEL" package="Resources" namespace="\">
  <class name="fileManager" abstract="">
    <info>
      <version>0.1</version>
      <build>2</build>
      <datecreated>1421222469</datecreated>
      <daterevised>1421223028</daterevised>
      <extends/>
      <implements/>
      <throws/>
      <title>Application File manager</title>
      <description>Manages all application files for the current running application.

NOTE: For each call it checks if there is an active application. If not, returns false every time.
All paths are relative to the application root folder or the application shared folder root.
The shared folder is one for all applications, so be careful of what you are storing there.</description>
      <deprecated/>
    </info>
    <constants>
      <const type="integer" name="ACCOUNT_MODE">
        <description>The account file mode.</description>
      </const>
      <const type="integer" name="TEAM_MODE">
        <description>The team file mode.</description>
      </const>
    </constants>
    <properties>
      <scope type="public"/>
      <scope type="protected"/>
      <scope type="private">
        <prop type="integer" name="mode">
          <description>The file mode for the class instance.</description>
        </prop>
        <prop type="boolean" name="shared">
          <description>Shared or private application data.</description>
        </prop>
      </scope>
    </properties>
    <methods>
      <scope type="public">
        <method name="__construct" returntype="void">
          <description>Create a new instance of an application file manager.</description>
          <parameters>
            <parameter name="$mode" type="integer" defaultvalue="">
              <description>The file mode.
See class constants for options.
It is in account mode by default.</description>
            </parameter>
            <parameter name="$shared" type="boolean" defaultvalue="">
              <description>If set to true, the fileManager will have access to the shared application data folder.
It is FALSE by default.</description>
            </parameter>
          </parameters>
          <returndescription/>
          <throws/>
          <deprecated/>
        </method>
        <method name="create" returntype="boolean">
          <description>Creates a new file in the specified location in the account application folder.</description>
          <parameters>
            <parameter name="$file" type="string" defaultvalue="">
              <description>The file path.</description>
            </parameter>
            <parameter name="$contents" type="string" defaultvalue="">
              <description>The text file contents.</description>
            </parameter>
            <parameter name="$recursive" type="boolean" defaultvalue="">
              <description>Indicates whether the file will create the path's folders if don't exist.
It is TRUE by default.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="remove" returntype="boolean">
          <description>Remove a file from the specified location in the account application folder.</description>
          <parameters>
            <parameter name="$file" type="string" defaultvalue="">
              <description>The file path to be removed.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="get" returntype="mixed">
          <description>Get the contents of a file from the specified location in the account application folder.</description>
          <parameters>
            <parameter name="$file" type="string" defaultvalue="">
              <description>The file path to get the contents from.</description>
            </parameter>
          </parameters>
          <returndescription>The file contents or NULL if the file does not exist.
FALSE if no active application is found.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="put" returntype="boolean">
          <description>Put contents to a file from the specified location in the account application folder.</description>
          <parameters>
            <parameter name="$file" type="string" defaultvalue="">
              <description>The file path to put the contents to.</description>
            </parameter>
            <parameter name="$contents" type="string" defaultvalue="">
              <description>The contents to be written.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="copy" returntype="boolean">
          <description>Copy the contents of a file to another file in the specified location in the account application folder.</description>
          <parameters>
            <parameter name="$from_file" type="string" defaultvalue="">
              <description>The source file path.</description>
            </parameter>
            <parameter name="$to_file" type="string" defaultvalue="">
              <description>The destination file path.</description>
            </parameter>
            <parameter name="$preventOverwrite" type="boolean" defaultvalue="">
              <description>If set to TRUE the destination file will not be overwritten.
It is FALSE by default.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="move" returntype="boolean">
          <description>Move a file to another location in the specified location in the account application folder.</description>
          <parameters>
            <parameter name="$from_file" type="string" defaultvalue="">
              <description>The source file path.</description>
            </parameter>
            <parameter name="$to_file" type="string" defaultvalue="">
              <description>The destination file path.</description>
            </parameter>
            <parameter name="$preventOverwrite" type="boolean" defaultvalue="">
              <description>If set to TRUE the destination file will not be overwritten.
It is FALSE by default.</description>
            </parameter>
          </parameters>
          <returndescription>True on success, false on failure.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
      <scope type="protected"/>
      <scope type="private">
        <method name="getPath" returntype="string">
          <description>Get the root folder for the object.</description>
          <parameters/>
          <returndescription>The root folder, according to mode and shared variable.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
    </methods>
  </class>
</manual>
